Scenario:

It is the year 2024:
University Xter Malaysia Bangi (UXMB) is a well-knowed university in Bangi. It is currently recruiting for 1 student.

UXMB's campus has 1 dorm room for students, a single person dorm.
The single person dorm can accomodate only 1 person at the same time.

Each UXMB student must stay in campus to proceed with their studies.

Student A is a new student in UXMB and stayed at the single person dorm.
Student A is required to stay at this dorm for the 4 year of his study which he is now only a year 1 student.

At the year 2025, the school suddenly annouced to carry out a 1-year renovation plan to the dorm.

During the 1 year renovation, student originally staying in the dorm will be temporarily moved and wait until renovation has completed.
Student A received a notice that the room should be evacuated or he will be evicted.

But due to the local law, student A cannot be randomly evicted and renovation must wait until student A completed his studies.

Now at the same time, there are 1 new students at the UXMB office which is student B.

Currently, student A has 3 year remaining in studies. 
Repair worker needs 1 year to complete renovation. 
Student B and C has 4 year remaining in studies.

How can we propose a solution to solve this efficiently, so that 2 students can finish their studies and the renovation can carry out?

Solution Planning:

Assuming student A, B and repair worker as 3 threads:
--> Student A: thread_A
--> Student B: thread_B
--> Repair worker: thread_w

Assuming the dorm space as the resource:
--> Student A will first finish the 3 years of study in dorm
--> Student A will then move out

--> Next, repair worker will perform renovation for 1 year
--> Repair worker completed renovation

--> Student B will move in to study for 4 years

Steps:

--> Create global mutex
--> Create global semaphore

--> Create global data of current number of person in the room
--> Create global data of current year

--> Create global data of 2 students representing their current years of study left (YOSL)
    -> Student A = 3 years
    -> Student B = 4 years
    
-> Create global data of repair worker representing current years of rennovation left (YORL)
    -> 1 year

--> Create a function
    -> Single dorm (using mutex, only for student A and repair worker)
        > Lock mutex
        > Increase number of person in room
        > Loop until YOSL / YORL becomes 0
            > Increase current year by 1
            > Decrease YOSL / YORL by 1
            > Print current year and information of thread
        > Unlock mutex
        > Decrease number of person in room

--> Create 3 threads which represent A, B and repair

--> In main function:

    -> Initialize mutex

    -> Create thread_A (single_dorm)
    -> Create thread_repair (single_dorm)

    -> thread_A join 
    -> thread_repair join

    -> Destroy mutex